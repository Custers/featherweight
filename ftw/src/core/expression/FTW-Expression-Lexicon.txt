(*LIMIT_RECURSION=10000)(?six)
(?(DEFINE)
  ### Note on Suppressed Callouts: Some token sequences and token synonym alternations expect the constituent tokens to callout, enabling matching
  ###                              of the tokens themselves, rather than the whole sequence. Each supressed callout must not match more than its
  ###                              constituent submatches, since this would cause misalignment in token boundaries when indexing the callout results.
  ###
  ### Submatch naming of Operators: These submatch names follow the pattern "namespace_opNN_operatorname...", where "namespace" is the type of
  ###                               value on which the operator can act, and "NN" represented as two decimal digits defines the precedence of the
  ###                               operator as defined by http://en.cppreference.com/w/cpp/language/operator_precedence

  ### 'format' tokens define human-readable structure
    (?'format_sp'                       \s*                                                                                                                    (?C'format_sp'))
    (?'format_boundary'                 \b ) #Suppress callout of token boundaries; this zero-width assertion does not affect string extraction                (?C'format_boundary'))
    (?'format_comment_open'             \\\*                                                                                                                   (?C'format_comment_open'))
    (?'format_comment_close'            \*\\                                                                                                                   (?C'format_comment_close'))
    (?'format_valid_comment'                                                                                                                                   (?C'format_valid_comment'))
  ### grammar boundaries for each discrete statement and script
    (?'grammar_script_begin'            \A                                                                                                                     (?C'grammar_script_begin'))
    (?'grammar_script_end'              \z                                                                                                                     (?C'grammar_script_end'))
    (?'grammar_statement_begin'         (?: \A | \v) \h*                                                                                                       (?C'grammar_statement_begin'))
    (?'grammar_statement_end'           \h* (?: \v | \z)                                                                                                       (?C'grammar_statement_end'))
  ### scope modifiers within an expression
    (?'scope_open'                      \(                                                                                                                     (?C'scope_open'))
    (?'scope_close'                     \)                                                                                                                     (?C'scope_close'))
  ### variable identifiers
    (?'address_variable'                (?: \$ [A-Za-z0-9\-\_]+ (?&format_boundary) )                                                                          (?C'address_variable'))
  ### variable assignment
  ### constants
    (?'grammar_literal'                 (?: (?&literal_undefined) | (?&grammar_literal_booleanish) | (?&grammar_literal_numberish) )                           (?C'grammar_literal'))
    (?'grammar_literal_booleanish'      (?: (?&literal_true) | (?&literal_false) )                                                                             (?C'grammar_literal_booleanish'))
    (?'grammar_literal_numberish'       (?: (?&literal_decimal) | (?&literal_hex) | (?&literal_inf_pos) | (?&literal_inf_neg) | (?&literal_nan) )              (?C'grammar_literal_numberish'))
    (?'literal_undefined'               (?&format_boundary) (?: UNDEFINED  |  UNKNOWN  |  INDETERMINATE ) (?&format_boundary)                                  (?C'literal_undefined'))
    (?'literal_true'                    (?&format_boundary) (?: TRUE  ) (?&format_boundary)                                                                    (?C'literal_true'))
    (?'literal_false'                   (?&format_boundary) (?: FALSE ) (?&format_boundary)                                                                    (?C'literal_false'))
    (?'literal_decimal'                 (?&format_boundary) (?: (\+|-)?([0-9]+(\.[0-9]*)?|\.[0-9]+)(?: [Ee](\+|-)?[0-9]+)? ) (?&format_boundary)               (?C'literal_decimal'))
    (?'literal_hex'                     (?&format_boundary) (?: 0x[0-9A-F]+ ) (?&format_boundary)                                                              (?C'literal_hex'))
    (?'literal_inf_pos'                 (?&format_boundary) (?: \+?INF ) (?&format_boundary)                                                                   (?C'literal_inf_pos'))
    (?'literal_inf_neg'                 (?&format_boundary) (?: -INF ) (?&format_boundary)                                                                     (?C'literal_inf_neg'))
    (?'literal_nan'                     (?&format_boundary) (?: NaN ) (?&format_boundary)                                                                      (?C'literal_nan'))
  ### lexicon and grammar of Boolean Expressions
    (?'grammar_expression_boolean'      (?&grammar_subexpr_bool) (?:(?&format_sp) (?&grammar_op_infix_booleanish) (?&format_sp) (?&grammar_subexpr_bool))* (?&format_sp) (?C'grammar_expression_boolean'))
    (?'grammar_subexpr_scoped'          (?&scope_open) (?&format_sp) (?&grammar_expression) (?&format_sp) (?&scope_close)                                      (?C'grammar_subexpr_scoped'))
    (?'grammar_subexpr_bool'            (?&grammar_op_prefix_booleanish)? (?&format_sp) (?: (?C'try_subexpr_scoped')(?&grammar_subexpr_scoped)| (?C'try_operation_assignment')(?&grammar_operation_assignment)|(?C'try_operation_bool')(?&grammar_operation_bool) )  (?C'grammar_subexpr_bool'))
    (?'grammar_operation_bool'          (?&format_sp) (?&grammar_operand_booleanish) (?: (?&format_sp) (?&grammar_op_infix_booleanish) (?&format_sp) (?&grammar_operand_booleanish))*  (?C'grammar_operation_bool'))
    (?'grammar_operand_booleanish'      (?: (?C'try_address_variable') (?&address_variable) | (?C'try_literal_booleanish') (?&grammar_literal_booleanish) )    (?C'grammar_operand_booleanish'))
    (?'grammar_op_prefix_booleanish'    (?: (?&op_03_prefix_not) )                                                                                             (?C'grammar_op_prefix_booleanish'))
    (?'grammar_op_infix_equality'       (?: (?&op_09_infix_equal) | (?&op_09_infix_noteql) )                                                                   (?C'grammar_op_infix_equality'))
    (?'grammar_op_infix_booleanish'     (?: (?&op_13_infix_and) | (?&op_14_infix_or) | (?&op_09_infix_xor) | (?&grammar_op_infix_equality) )                   (?C'grammar_op_infix_booleanish'))
    (?'op_03_prefix_not'                (?: NOT | !)                                                                                                           (?C'op_03_prefix_not'))
    (?'op_09_infix_xor'                 (?: XOR | !=)                                                                                                          (?C'op_09_infix_xor'))
    (?'op_09_infix_equal'               (?: == | (?&format_boundary)EQUALS(?&format_boundary) | (?&format_boundary)IS(?!\s*NOT)(?&format_boundary) )           (?C'op_09_infix_equal'))
    (?'op_09_infix_noteql'              (?: != | <> | (?&format_boundary)IS\s*NOT(?&format_boundary) )                                                         (?C'op_09_infix_noteql'))
    (?'op_13_infix_and'                 (?: AND | &&)                                                                                                          (?C'op_13_infix_and'))
    (?'op_14_infix_or'                  (?: OR | \|\| )                                                                                                        (?C'op_14_infix_or'))
    (?'op_15_infix_assign'              (?: =(?!=) )                                                                                                           (?C'op_15_infix_assign'))
  ### lexicon and grammar of Boolean Expressions
    (?'grammar_expression_numeric'      (?&grammar_literal_numberish)                                                                                          (?C'grammar_expression_numeric'))
  ### grammar of Expressions
    (?'grammar_operation_assignment'    \$ [A-Za-z0-9\-\_]+ \s* =(?!=) (?C'op_15_infix_assign') (?&format_sp) (?&grammar_expression)                          (?C'grammar_operation_assignment'))
    (?'grammar_expression'              (?: (?C'try_expression_boolean') (?&grammar_expression_boolean) | (?C'try_expression_numeric') (?&grammar_expression_numeric))                               (?C'grammar_expression'))
    (?'grammar_statement'               (?&grammar_statement_begin) (?&grammar_expression) (?&grammar_statement_end)                                           (?C'grammar_statement'))
)

### grammar of the entire script, where a valid lexing regular expression should ALWAYS match exactly one alternative below
(?:
  (?'grammar_script_valid' (?&grammar_script_begin)(?&grammar_statement)*(?&grammar_script_end) (?C'grammar_script_valid'))
   |
  (?'grammar_script_invalid' (?C'grammar_script_invalid'))
)
